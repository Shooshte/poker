{"version":3,"sources":["components/HoleCards/index.tsx","components/CardMatrix/index.tsx","components/Search/Toggle/index.tsx","components/Search/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["HoleCards","props","className","type","Fragment","cards","rainbow","CardMatrix","hands","pair","map","hand","suited","key","_id","connector","other","Toggle","state","selectedIndex","initialIndex","handleButtonClick","index","setState","onToggle","this","label","buttons","button","i","style","borderRight","length","width","onClick","React","Component","testButtons","testButtons2","testButtons3","Search","App","strategyHands","RFI","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c7f5cb2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./holeCards.css\";\n\nimport { HandCards, HandType } from \"../../types/types\";\n\ninterface Props {\n  type: HandType;\n  cards: HandCards;\n  suited?: boolean;\n  rainbow?: boolean;\n}\n\nconst HoleCards: React.FC<Props> = props => {\n  return (\n    <div className=\"hole-cards-container\">\n      {props.type === \"pair\" ? (\n        <React.Fragment>\n          <div className=\"hole-card white\">{props.cards[0]}</div>\n          <div className=\"hole-card white\">{props.cards[1]}</div>\n        </React.Fragment>\n      ) : props.rainbow ? (\n        <React.Fragment>\n          <div className=\"hole-card white\">{props.cards[0]}</div>\n          <div className=\"hole-card orange\">{props.cards[1]}</div>\n        </React.Fragment>\n      ) : (\n        <React.Fragment>\n          <div className=\"hole-card orange\">{props.cards[0]}</div>\n          <div className=\"hole-card orange\">{props.cards[1]}</div>\n        </React.Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default HoleCards;\n","import React from \"react\";\nimport HoleCards from \"../HoleCards\";\n\nimport { HandsPosition } from \"../../types/types\";\n\nimport \"./cardMatrix.css\";\n\ninterface Props {\n  hands?: HandsPosition;\n}\n\nconst CardMatrix: React.FC<Props> = ({ hands }) => {\n  return (\n    <div className=\"card-matrix\">\n      {hands ? (\n        <React.Fragment>\n          {hands.pair && (\n            <div className=\"card-matrix-row\">\n              <label className=\"card-matrix-row-heading\">Pairs:</label>\n              <div className=\"card-matrix-cards\">\n                {hands.pair.map(hand => (\n                  <HoleCards\n                    type=\"pair\"\n                    suited={hand.suited}\n                    rainbow={hand.rainbow}\n                    cards={hand.cards}\n                    key={hand._id}\n                  />\n                ))}\n              </div>\n            </div>\n          )}\n          {hands.connector && (\n            <div className=\"card-matrix-row\">\n              <label className=\"card-matrix-row-heading\">Connectors:</label>\n              <div className=\"card-matrix-cards\">\n                {hands.connector.map(hand => (\n                  <HoleCards\n                    type=\"connector\"\n                    suited={hand.suited}\n                    rainbow={hand.rainbow}\n                    cards={hand.cards}\n                    key={hand._id}\n                  />\n                ))}\n              </div>\n            </div>\n          )}\n          {hands.other && (\n            <div className=\"card-matrix-row\">\n              <label className=\"card-matrix-row-heading\">Others:</label>\n              <div className=\"card-matrix-cards\">\n                {hands.other.map(hand => (\n                  <HoleCards\n                    type=\"other\"\n                    suited={hand.suited}\n                    rainbow={hand.rainbow}\n                    cards={hand.cards}\n                    key={hand._id}\n                  />\n                ))}\n              </div>\n            </div>\n          )}\n        </React.Fragment>\n      ) : (\n        \"No hands to display.\"\n      )}\n    </div>\n  );\n};\n\nexport default CardMatrix;\n","import React from \"react\";\nimport \"./toggle.css\";\n\ninterface Button {\n  label: string;\n  index: number;\n}\n\ninterface Props {\n  label: string;\n  initialIndex: number;\n  onToggle: (index: number) => void;\n  buttons: Button[];\n}\n\ninterface State {\n  selectedIndex: number;\n}\n\nclass Toggle extends React.Component<Props, State> {\n  state = {\n    selectedIndex: this.props.initialIndex\n  };\n\n  handleButtonClick = (index: number) => {\n    this.setState({\n      selectedIndex: index\n    });\n    this.props.onToggle(index);\n  };\n\n  render() {\n    const { label, buttons } = this.props;\n    const { selectedIndex } = this.state;\n\n    return (\n      <div className=\"toggle-container\">\n        <label>{label}</label>\n        <div className=\"search-buttons-container\">\n          {buttons.map((button, i) => (\n            <button\n              key={button.index}\n              className={selectedIndex === button.index ? \"active\" : \"inactive\"}\n              style={{\n                borderRight:\n                  i + 1 === buttons.length\n                    ? \"none\"\n                    : selectedIndex === button.index\n                    ? \"none\"\n                    : \"1px solid #efefef\",\n                width: `calc(100% / ${buttons.length})`\n              }}\n              onClick={() => this.handleButtonClick(button.index)}\n            >\n              {button.label}\n            </button>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Toggle;\n","import React from \"react\";\nimport \"./search.css\";\n\nimport Toggle from \"./Toggle\";\n\nconst testButtons = [\n  { label: \"RFI\", index: 1 },\n  { label: \"CC\", index: 2 },\n  { label: \"3BET\", index: 3 },\n  { label: \"4BET\", index: 4 }\n];\n\nconst testButtons2 = [\n  { label: \"UTG\", index: 1 },\n  { label: \"MP\", index: 2 },\n  { label: \"CO\", index: 3 },\n  { label: \"BTN\", index: 4 },\n  { label: \"SB\", index: 5 },\n  { label: \"BB\", index: 6 }\n];\n\nconst testButtons3 = [\n  { label: \"A\", index: 1 },\n  { label: \"K\", index: 2 },\n  { label: \"Q\", index: 3 },\n  { label: \"J\", index: 4 },\n  { label: \"T\", index: 5 },\n  { label: \"9\", index: 6 },\n  { label: \"8\", index: 7 },\n  { label: \"7\", index: 8 },\n  { label: \"6\", index: 9 },\n  { label: \"5\", index: 10 },\n  { label: \"4\", index: 11 },\n  { label: \"3\", index: 12 },\n  { label: \"2\", index: 13 }\n];\n\nclass Search extends React.Component<any, any> {\n  render() {\n    return (\n      <div className=\"search-container\">\n        <Toggle\n          label=\"Preflop action:\"\n          initialIndex={1}\n          onToggle={(i: number) => {}}\n          buttons={testButtons}\n        />\n        <Toggle\n          label=\"Preflop position:\"\n          initialIndex={1}\n          onToggle={(i: number) => {}}\n          buttons={testButtons2}\n        />\n        <Toggle\n          label=\"Filter by card:\"\n          initialIndex={1}\n          onToggle={(i: number) => {}}\n          buttons={testButtons3}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport CardMatrix from \"./components/CardMatrix\";\nimport Search from \"./components/Search\";\n\nimport strategyHands from \"./data/strategyHands.json\";\n\nimport { Position, Card, PreflopAction, PreflopPosition } from \"./types/types\";\n\ninterface State {\n  cardsFilter: Card[];\n  preflopAction: PreflopAction;\n  preflopPosition: PreflopPosition;\n}\n\nclass App extends React.Component<any, State> {\n  render() {\n    return (\n      <React.Fragment>\n        <CardMatrix hands={(strategyHands as Position[])[0].hands.RFI} />\n        <Search />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}